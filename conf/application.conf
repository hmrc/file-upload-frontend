# Copyright 2020 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "frontend.conf"

appName = "file-upload-frontend"

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.frontend.FrontendModule"
play.http.filters = "uk.gov.hmrc.fileupload.Filters"

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

play.http.errorHandler = "uk.gov.hmrc.fileupload.utils.ShowErrorAsJson"

play.http.router = prod.Routes

play.http.secret.key = "LvK8smzDPV07QBm0mAuP`OZfjM`^PT6DYD_9IQp^rQ7^H<?QHcHi;my>aSsh8Xjh"

play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

play.http.parser.maxDiskBuffer = 100MB

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
  redirection.allowedHosts = "gov.uk, localhost"
}

metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

auditing {
  enabled = false
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

aws {
  s3.bucket.upload.transient = file-upload-transient
  s3.bucket.upload.transient = ${?S3_BUCKET_TRANSIENT}
  s3.bucket.upload.quarantine = file-upload-quarantine
  s3.bucket.upload.quarantine = ${?S3_BUCKET_QUARANTINE}
  s3.bucket.env-subdir = local
  s3.bucket.zip-subdir = zip/local
  s3.bucket.zip-duration = 7.days # max 7 days for SigV4 algorithm
  s3.timeout.connection = 5 seconds
  s3.timeout.request = 19 seconds
  s3.timeout.socket = 29 seconds
  access.key.id = "ENTER YOUR KEY"
  access.key.id = ${?AWS_KEY}
  secret.access.key = "ENTER YOUR SECRET KEY"
  secret.access.key = ${?AWS_SECRET}
  service_endpoint = ${?AWS_ENDPOINT}
}

flags {
  log-file-extensions = false
}

proxy.proxyRequiredForThisEnvironment = false
proxy.host = "localhost"
proxy.port = 3128
proxy.username = fupload1
proxy.password = password1

akka {
  logger-startup-timeout = 30s
}

# ClamAv scanning configuration
clam.antivirus {
  disableScanning = false

  host = avscan
  port = 3310

  timeout = 5000

  numberOfTimeoutAttempts = 3
}

microservice {
  services {
    file-upload-backend {
      host = localhost
      port = 8898
    }
    # only used by testOnly endpoint
    sdes-stub {
      host = localhost
      port = 9191
      enabled = true
    }
  }
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
      rates = SECONDS
      durations = MILLISECONDS
    }
  }
}
